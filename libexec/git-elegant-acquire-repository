#!/usr/bin/env bash
set -e

_user_name_key="user.name"
_user_name_default=$(git config ${_user_name_key} || echo "")
_user_name_message="What is your user name?"

_user_email_key="user.email"
_user_email_default=$(git config ${_user_email_key} || echo "")
_user_email_message="What is your user email?"

_core_editor_key="core.editor"
_core_editor_default=$(git config "${_core_editor_key}" || echo "vim")
_core_editor_message="Please specify a command to start the editor."


# mandatory
_core_comment=("core.commentChar" "|")
_apply_whitespace=("apply.whitespace" "fix")
_fetch_prune=("fetch.prune" "true")
_fetch_pruneTags=("fetch.pruneTags" "true")
## Line endings
## See https://help.github.com/en/articles/configuring-git-to-handle-line-endings
### MAC/Linux
_core_autocrlf_darwinlinux=("core.autocrlf" "input")
### Windows
_core_autocrlf_windows=("core.autocrlf" "true")
## Pull
_pull_rebase=("pull.rebase" "true")
## Rebase
_rebase_autoStash=("rebase.autoStash" "false")
## Credentials, MAC only
_credential_helper_darwin=("credential.helper" "osxkeychain")


__ask_question() {
    # usage: __ask_options <prefix>
    # it makes available ANSWER available
    message=$(eval "echo -n \$${1}_message")
    echo -n "$message"
    default=$(eval "echo -n \$${1}_default")
    if [[ -n "$default" ]]; then echo -n " {$default}"; fi
    echo -n ": "
    read answer
    export ANSWER=${answer:-$default}
}

__interactive-configuration() {
    box "Interactive configuration. Please hit enter if you wish {default value}."
    FUNCTIONS=$@
    for f in ${FUNCTIONS[@]}; do
        unset ANSWER
        while [ -z "${ANSWER}" ]; do
            __ask_question ${f}
            if [[ -n "${ANSWER}" ]]; then
                boxtee git config --local $(eval "echo -n \$${f}_key") "${ANSWER}"
            fi
        done
    done
}

__mandatory-configuration() {
    # usage: __mandatory-configuration <name of array> ...
    for config in ${@}; do
        local os=$(uname -s)
        if [[ "Darwin Linux" =~ "${os}" ]]; then
            [[ "${config}" =~ "windows" ]] && continue
            [[ "${os}" = "Darwin" && ! "${config}" =~ "darwin" && "${config}" =~ "linux" ]] && continue
            [[ "${os}" = "Linux" && ! "${config}" =~ "linux"  && "${config}" =~ "darwin" ]] && continue
        fi
        if [[ "Windows" = "${os}" ]]; then
            [[ "${config}" =~ "darwin" || "${config}" =~ "linux" ]] && continue
        fi
        local data=($(eval "echo -n \${${config}[@]}"))
        boxtee git config --local ${data[0]} ${data[1]}
    done
}
__remove-old-aliases() {
    old_aliases=($(git config --get-regexp ^alias\. | grep "elegant " | cut -f 1 -d " "))
    if [[ ${#old_aliases[@]} -ne 0 ]]; then
        local counter=0
        for old in ${old_aliases[@]}; do
            boxtee git config --local --unset ${old} &&
            counter=$((counter+1)) ||
            box "Non-local alias! Remove it if needed using 'git config --global --unset ${old}'"
        done
        box "${counter} git aliases were removed that contained 'elegant git' reference."
    else
        box "There are no git aliases which contain 'elegant git' reference."
    fi
}

__aliases-configuration() {
    for command in ${@}; do
        local alias=${command}
        local origin="elegant ${command}"
        boxtee git config --local "alias.${alias}" "${origin}"
    done
}

default() {
      __interactive-configuration _user_name _user_email _core_editor
      __mandatory-configuration \
        _core_comment _apply_whitespace _fetch_prune _fetch_pruneTags \
        _core_autocrlf_darwinlinux _core_autocrlf_windows _pull_rebase \
        _rebase_autoStash _credential_helper_darwin
      __remove-old-aliases
      __aliases-configuration "pull" "clear-local" $(git elegant commands | grep work)
}
