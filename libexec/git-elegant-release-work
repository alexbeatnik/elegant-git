#!/usr/bin/env bash

command-purpose() {
    cat <<MESSAGE
Releases available work as a new annotated tag.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant release-work [tag name]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Annotates the latest commit of \`master\` branch with a given tag and publishes
it. The tag's message will be prepopulated using commits subjects (from oldest
to newest) between the last available tag and HEAD. The release notes will be
either copied to clipboard (if \`pbcopy\` or \`xclip\` is available) or printed
to standard output using \`git elegant show-release-notes\`.

Prior to the execution, a current state is saved (a branch with modifications).
After the successful command execution, the state will be restored. In the case
of a failure, you need to go to the desired branch and apply a stash if needed.

Approximate commands flow is
\`\`\`bash
==>> git elegant release-work 1.2.0
git checkout master
git pull --tags
git tag --annotate --file tag-message --edit 1.2.0
git push --tags
git elegant show-release-notes smart 1.1.12 1.2.0
\`\`\`
MESSAGE
}

--release-work() {
    git-verbose checkout ${MASTER}
    git-verbose pull --tags
    local new_tag="${1}"
    local last_tag=$(git for-each-ref --sort "-version:refname" --format "%(refname:short)" refs/tags --count 1)
    if [[ -z ${new_tag} ]]; then
        question-text "'${last_tag}' is the last tag. Which one will be next? "
        read new_tag
    fi
    local message="tag-message"
    echo "Release ${new_tag}" >> ${message}
    echo "" >> ${message}
    git log ${last_tag}...@ --pretty=format:'- %s' --reverse >> ${message}
    echo "" >> ${message}
    echo "" >> ${message}
    git-verbose tag --annotate --file ${message} --edit ${new_tag}
    remove-file ${message}
    git-verbose push --tags


    local default_tool="cat"
    local copy_tool=${default_tool}
    # mac
    which pbcopy >/dev/null && copy_tool="pbcopy"
    # linux
    which xclip >/dev/null && copy_tool="xclip -selection clipboard"
    (
        git-verbose elegant show-release-notes smart ${last_tag} ${new_tag}
    ) | ${copy_tool}
    if [[ ! "${default_tool}" == "${copy_tool}" ]]; then
        info-text "The release notes are copied to clipboard."
    fi

}

default() {
    stash-pipe branch-pipe --release-work "${@}"
}
