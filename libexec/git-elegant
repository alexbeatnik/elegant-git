#!/usr/bin/env bash
set -e
[  -n "$GED" ] && set -x

# Update PATH for a round of command execution.
# It registers all "libexec" scripts.
BINS=$(dirname ${0})
export PATH=${BINS}:${PATH}

__red=`tput setaf 1`
__green=`tput setaf 2`
__magenta=`tput setaf 5`
__reset=`tput sgr0`
__site="https://elegant-git.bees-hive.org"

box(){
    t="$@xxxxxx"
    c=${replace:-=}
    echo ${t//?/$c}
    echo "$c$c $@ $c$c"
    echo ${t//?/$c}
}

boxtee() {
    box "$@"
    "$@"
}

__gm() {
    echo "${__green}$@${__reset}"
}

__rm() {
    echo "${__red}$@${__reset}"
}

__mmn() {
    echo -n "${__magenta}$@${__reset}"
}

MASTER="master"
REMOTE_NAME="origin"
RMASTER="${REMOTE_NAME}/master"

_error-if-empty() {
    # _error-if-empty <a value to check> <error message>
    if [[ -z "$1" ]]; then
        __rm "$2"
        exit 45
    fi
}

__branches() {
    local branch_command="$1"; shift
    local b=$(eval "$branch_command" | sed -e 's|[* ]||g')
    echo ${b[@]}
}

__loop_ask() {
    local c="$1"; shift
    local m="$1"; shift
    [ -z "$1" ] && return 0
    for i in $@; do
        __mmn "$m [$i] "
        read answer
        if [ -z "$answer" ]; then
            eval "$c $i"
        fi
    done
}

__loop() {
    local c="$1"; shift
    [ -z "$1" ] && return 0
    for i in $@; do
        eval "$c $i"
    done
}

__batch() {
    local MM="$1"; shift
    local AM="$1"; shift
    local CM="$1"; shift
    __mmn "$MM "
    read answer
    if [ -z "$answer" ]; then
        __loop "$CM" $@
    else
        __loop_ask "$CM" "$AM" $@
    fi
}

branch-from-remote-reference() {
    # usage: branch-from-remote-reference <full reference name>
    echo ${1} | sed "s|^[a-zA-Z0-9_-]*/||g"
}

--print-command-in-usage() { (
    source "${BINS}/git-elegant-${1}"
    printf "    %-20s %s\n" "${1}" "$(command-purpose)"

) }

--usage() {
    cat <<MESSAGE

An assistant who carefully makes routine work with Git.

usage: git elegant [-h|--help|help]
   or: git elegant <command> [args]
   or: git elegant <command> [-h|--help|help]


There are commands used in various situations such as

 act with a repository
$(--print-command-in-usage clone-repository)
$(--print-command-in-usage init-repository)
$(--print-command-in-usage acquire-repository)
$(--print-command-in-usage clear-local)

 manage a personal work
$(--print-command-in-usage start-work)
$(--print-command-in-usage save-work)
$(--print-command-in-usage amend-work)
$(--print-command-in-usage deliver-work)

 operate a flow of work management
$(--print-command-in-usage obtain-work)
$(--print-command-in-usage accept-work)

 and others
$(--print-command-in-usage commands)


Please visit ${__site} to find out more.

MESSAGE
}

--run-command() {
    # usage: <command name> [arg]...
    local COMMAND=${1}; shift
    . "${BINS}/git-elegant-${COMMAND}" 2>/dev/null || {
        echo "Unknown command: git elegant $COMMAND" && --usage && exit 46
    }
    case "${1}" in
        -h|--help|help)
            echo ""
            command-synopsis
            echo ""
            command-description
            echo ""
            ;;
        *)  default "$@" ;;
    esac
}

main() {
    local COMMAND="none"
    [[ -n "$1" ]] && COMMAND="$1" && shift
    case "${COMMAND}" in
        none|-h|--help|help) --usage                       ;;
        *)                   --run-command ${COMMAND} "$@" ;;
    esac
}

main "$@"
