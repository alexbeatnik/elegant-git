#!/usr/bin/env bash
set -e

command-purpose() {
    cat <<MESSAGE
Publishes current branch to a remote repository.
MESSAGE
}

command-synopsis() {
    cat <<MESSAGE
usage: git elegant deliver-work [branch name]
MESSAGE
}

command-description() {
    cat<<MESSAGE
Updates the current branch by rebasing the default upstream branch. Then,
it pushes HEAD to appropriate upstream branch. By default, the name of remote
branch is equal to the local one. Also, you can give a custom name of
the remote branch if needed.

If there are uncommitted changes, they will be stashed prior to the command
execution and un-stashed after its successful completion. This is useful if you
need to deliver only sub-set of the changes.

Approximate commands flow is
\`\`\`bash
==>> git elegant deliver-work
git fetch
git rebase origin/master
git push --set-upstream --force origin task-123:task-123
\`\`\`
MESSAGE
}

--deliver-work-logic() {
    git-verbose fetch
    git-verbose rebase ${RMASTER}
    local remote_branch=${1}
    if [[ -n "${2}" ]]; then
        remote_branch=${2}
    fi
    git-verbose push --set-upstream --force origin ${1}:${remote_branch}
}

default() {
    local branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ "${branch}" == "master" ]]; then
        error-box "No pushes to 'master' branch. Please read more on ${__site}"
        exit 42
    fi
    stash-pipe --deliver-work-logic ${branch} "${@}"
}
